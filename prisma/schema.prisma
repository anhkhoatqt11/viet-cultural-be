generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Achievement {
  id          Int    @id @default(autoincrement())
  userId      Int
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  stars       Int
  User        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AfterQuestionInformation {
  id             Int           @id @default(autoincrement())
  images         Json
  texts          Json
  puzzleGameId   Int?
  quizGameId     Int?
  treasureGameId Int?
  wordGameId     Int?
  PuzzleGame     PuzzleGame?   @relation(fields: [puzzleGameId], references: [id])
  QuizGame       QuizGame?     @relation(fields: [quizGameId], references: [id])
  TreasureGame   TreasureGame? @relation(fields: [treasureGameId], references: [id])
  WordGame       WordGame?     @relation(fields: [wordGameId], references: [id])
}

model Comment {
  id               Int                @id @default(autoincrement())
  postId           Int
  userId           Int
  content          String
  likes            Int                @default(0)
  dislikes         Int                @default(0)
  parentId         Int?
  Comment          Comment?           @relation("CommentToComment", fields: [parentId], references: [id])
  other_Comment    Comment[]          @relation("CommentToComment")
  Post             Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment_reaction comment_reaction[]
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String   @db.VarChar(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id       Int       @id @default(autoincrement())
  userId   Int
  title    String    @db.VarChar(255)
  question String
  media    Json
  Comment  Comment[]
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tags     Tags[]
}

model PuzzleGame {
  id                       Int                        @id @default(autoincrement())
  regionid                 Int?
  gametype                 Int?
  imageurl                 String?
  AfterQuestionInformation AfterQuestionInformation[]
  game_type                game_type?                 @relation(fields: [gametype], references: [id], onDelete: Cascade)
  Region                   Region?                    @relation(fields: [regionid], references: [id], onDelete: Cascade)
  PuzzlePiece              PuzzlePiece[]
}

model PuzzlePiece {
  id              Int        @id @default(autoincrement())
  puzzleid        Int
  piece_index     Int
  x_position      Int?
  y_position      Int?
  correct_x       Int
  correct_y       Int
  image_piece_url String?
  PuzzleGame      PuzzleGame @relation(fields: [puzzleid], references: [id], onDelete: Cascade)
}

model QuizGame {
  id                       Int                        @id @default(autoincrement())
  regionid                 Int?
  gametype                 Int?
  title                    String
  description              String?
  AfterQuestionInformation AfterQuestionInformation[]
  game_type                game_type?                 @relation(fields: [gametype], references: [id], onDelete: Cascade)
  Region                   Region?                    @relation(fields: [regionid], references: [id], onDelete: Cascade)
  QuizGameQuestion         QuizGameQuestion[]
}

model QuizGameQuestion {
  id            Int      @id @default(autoincrement())
  quiz_game_id  Int
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String?
  correctAnswer String   @db.VarChar(1)
  QuizGame      QuizGame @relation(fields: [quiz_game_id], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String   @id
  hashedToken String   @unique
  userId      Int
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  expireAt    DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Region {
  id           Int            @id @default(autoincrement())
  regionName   String         @db.VarChar(100)
  regionCode   String         @unique @db.VarChar(10)
  mediaUrl     String?        @db.VarChar(255)
  description  String?        @db.VarChar(255)
  PuzzleGame   PuzzleGame[]
  QuizGame     QuizGame[]
  TreasureGame TreasureGame[]
  WordGame     WordGame[]
}

model Tags {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  Post Post[]
}

model TreasureCard {
  id               Int          @id @default(autoincrement())
  treasure_game_id Int
  type             CardType
  value            String
  matchGroup       Int
  TreasureGame     TreasureGame @relation(fields: [treasure_game_id], references: [id], onDelete: Cascade)
}

model TreasureGame {
  id                       Int                        @id @default(autoincrement())
  regionid                 Int?
  gametype                 Int?
  title                    String?
  description              String?
  AfterQuestionInformation AfterQuestionInformation[]
  TreasureCard             TreasureCard[]
  game_type                game_type?                 @relation(fields: [gametype], references: [id], onDelete: Cascade)
  Region                   Region?                    @relation(fields: [regionid], references: [id], onDelete: Cascade)
}

model User {
  id                Int                @id @default(autoincrement())
  full_name         String             @db.VarChar(100)
  username          String?            @unique @db.VarChar(50)
  email             String             @unique @db.VarChar(100)
  password          String             @db.VarChar(255)
  avatarUrl         String?            @default("https://example.com/default-avatar.png") @db.VarChar(255)
  dateOfBirth       DateTime?
  location          String?            @db.VarChar(255)
  gender            String?            @db.VarChar(20)
  isVerified        Boolean            @default(false)
  Achievement       Achievement[]
  Comment           Comment[]
  EmailVerification EmailVerification?
  Post              Post[]
  RefreshToken      RefreshToken[]
  comment_reaction  comment_reaction[]
  password_resets   password_resets[]
}

model WordGame {
  id                       Int                        @id @default(autoincrement())
  regionid                 Int?
  gametype                 Int?
  question                 String
  hint                     String?
  answer                   String
  correct_letters          String[]
  letters                  String[]
  AfterQuestionInformation AfterQuestionInformation[]
  game_type                game_type?                 @relation(fields: [gametype], references: [id], onDelete: Cascade)
  Region                   Region?                    @relation(fields: [regionid], references: [id], onDelete: Cascade)
}

model comment_reaction {
  id            Int                @id @default(autoincrement())
  user_id       Int
  comment_id    Int
  reaction_type reaction_type_enum
  created_at    DateTime?          @default(now()) @db.Timestamp(6)
  Comment       Comment            @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment")
  User          User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model game_type {
  id           Int            @id @default(autoincrement())
  code         GameCodeEnum   @unique
  name         String
  PuzzleGame   PuzzleGame[]
  QuizGame     QuizGame[]
  TreasureGame TreasureGame[]
  WordGame     WordGame[]
}

model password_resets {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CardType {
  text
  image
}

enum GameCodeEnum {
  puzzle
  quiz
  word
  treasure
}

enum reaction_type_enum {
  Like
  Dislike
}
