generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id          Int     @id @default(autoincrement())
  regionName  String  @db.VarChar(100)
  regionCode  String  @unique @db.VarChar(10)
  mediaUrl    String? @db.VarChar(255)
  description String? @db.VarChar(255)
  games       Game[]
}

model Game {
  id        Int                        @id @default(autoincrement())
  regionId  Int
  region    Region                     @relation(fields: [regionId], references: [id], onDelete: Cascade)
  gameType  String                     @db.VarChar(50)
  gameData  Json
  createdAt DateTime                   @default(now())
  afterInfo AfterQuestionInformation[]
}

model AfterQuestionInformation {
  id             Int  @id @default(autoincrement())
  gameId         Int
  questionNumber Int
  images         Json
  texts          Json
  game           Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model User {
  id                Int                @id @default(autoincrement())
  full_name         String             @db.VarChar(100)
  username          String?             @unique @db.VarChar(50)
  email             String             @unique @db.VarChar(100)
  password          String             @db.VarChar(255)
  avatarUrl         String?            @db.VarChar(255) @default("https://example.com/default-avatar.png")
  dateOfBirth       DateTime?
  location          String?            @db.VarChar(255)
  gender            String?            @db.VarChar(20)
  isVerified        Boolean            @default(false)
  achievements      Achievement[]
  posts             Post[]
  comments          Comment[]
  refreshTokens     RefreshToken[]
  emailVerification EmailVerification?
}

model Achievement {
  id          Int    @id @default(autoincrement())
  userId      Int
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  stars       Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id       Int       @id @default(autoincrement())
  userId   Int
  title    String    @db.VarChar(255)
  question String
  media    Json
  tags     Json
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id       Int       @id @default(autoincrement())
  postId   Int
  userId   Int
  content  String
  likes    Int       @default(0)
  dislikes Int       @default(0)
  parentId Int?
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expireAt    DateTime
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String   @db.VarChar(6) // 6-digit OTP code
  createdAt DateTime @default(now()) @db.Timestamp(6)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
