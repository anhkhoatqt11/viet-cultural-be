generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievements {
  id          Int       @id @default(autoincrement())
  user_id     Int       @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model communities {
  id                Int                 @id(map: "Communities_pkey") @default(autoincrement())
  name              String              @db.VarChar(225)
  description       String?
  member_quantity   Int                 @default(1)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  community_members community_members[]
  community_posts   community_posts[]
}

model community_members {
  community_id Int         @default(autoincrement())
  user_id      Int         @default(autoincrement())
  joined_at    DateTime?   @db.Timestamptz(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_community")
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([community_id, user_id], map: "Community_members_pkey")
}

model community_posts {
  id           Int         @id(map: "Community_posts_pkey") @default(autoincrement())
  community_id Int         @default(autoincrement())
  user_id      Int         @default(autoincrement())
  subject      String      @db.VarChar(255)
  title        String?     @db.VarChar(255)
  content      String?
  media        String[]
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  communities  communities @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_community")
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model destinations {
  id                Int                 @id(map: "Destinations_pkey") @default(autoincrement())
  journey_id        Int                 @default(autoincrement())
  name              String              @db.VarChar(225)
  description       String
  media             String[]
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  journeys          journeys            @relation(fields: [journey_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_journey")
  games             games[]
  journey_notebooks journey_notebooks[]
  missions          missions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model games {
  id             Int          @id @default(autoincrement())
  destination_id Int          @default(autoincrement())
  game_type      String?      @db.VarChar(50)
  title          String       @db.VarChar(255)
  description    String?
  tutorial       String?
  mechanics      Json?
  media_assets   Json?
  reward_points  Int?         @default(0)
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  destinations   destinations @relation(fields: [destination_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_destination")
}

model journey_notebooks {
  id             Int          @id(map: "Journey_notebooks_pkey") @default(autoincrement())
  owner_id       Int          @default(autoincrement())
  destination_id Int          @default(autoincrement())
  notes          String
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  destinations   destinations @relation(fields: [destination_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_destination")
  users          users        @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_owner")
}

model journeys {
  id           Int            @id(map: "Journeys_pkey") @default(autoincrement())
  user_id      Int            @default(autoincrement())
  name         String         @db.VarChar(225)
  description  String
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  destinations destinations[]
  users        users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model missions {
  id             Int          @id(map: "Missions_pkey") @default(autoincrement())
  destination_id Int          @default(autoincrement())
  name           String       @db.VarChar(225)
  description    String?
  reward_points  Int          @default(0)
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  destinations   destinations @relation(fields: [destination_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_destination")
  rewards        rewards[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model rewards {
  reward_id  Int       @id @default(autoincrement())
  mission_id Int       @default(autoincrement())
  points     Int?      @default(0)
  badges     String?
  notes      String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  missions   missions  @relation(fields: [mission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mission")
}

model support_tickets {
  id         Int       @id @default(autoincrement())
  user_id    Int       @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model users {
  id                Int                 @id(map: "Users_pkey") @default(autoincrement())
  full_name         String              @db.VarChar(100)
  username          String              @db.VarChar(50)
  email             String              @db.VarChar(100)
  password          String
  avatart_url       String?
  date_of_birth     DateTime            @db.Date
  location          String              @db.VarChar(255)
  gender            String              @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  achievements      achievements[]
  community_members community_members[]
  community_posts   community_posts[]
  journey_notebooks journey_notebooks[]
  journeys          journeys[]
  support_tickets   support_tickets[]
}
